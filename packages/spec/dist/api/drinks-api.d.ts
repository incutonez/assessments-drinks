import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { DrinksListViewModel } from '../models';
import type { DrinksViewModel } from '../models';
import type { GetDrinksRequestViewModel } from '../models';
import type { PicturesViewModel } from '../models';
import type { ReviewsViewModel } from '../models';
export declare const DrinksApiAxiosParamCreator: (configuration?: Configuration) => {
    createDrink: (drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    createDrinkPicture: (drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    createDrinkReview: (drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    deleteDrink: (drinkId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    deleteDrinkPicture: (drinkId: number, pictureId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    deleteDrinkReview: (drinkId: number, reviewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    getDrink: (drinkId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    getDrinkPictures: (drinkId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    getDrinkReview: (drinkId: number, reviewId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    getDrinkReviews: (drinkId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    getDrinks: (query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    updateDrink: (drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    updateDrinkReview: (drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
export declare const DrinksApiFp: (configuration?: Configuration) => {
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>>;
    createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PicturesViewModel>>;
    createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsViewModel>>;
    deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>>;
    getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PicturesViewModel>>>;
    getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsViewModel>>;
    getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewsViewModel>>>;
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksListViewModel>>;
    updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
export declare const DrinksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;
    createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): AxiosPromise<PicturesViewModel>;
    createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;
    deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;
    getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PicturesViewModel>>;
    getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;
    getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewsViewModel>>;
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel>;
    updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
export interface DrinksApiInterface {
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;
    createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): AxiosPromise<PicturesViewModel>;
    createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;
    deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;
    getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PicturesViewModel>>;
    getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;
    getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewsViewModel>>;
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel>;
    updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;
}
export declare class DrinksApi extends BaseAPI implements DrinksApiInterface {
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DrinksViewModel, any>>;
    createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PicturesViewModel, any>>;
    createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ReviewsViewModel, any>>;
    deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DrinksViewModel, any>>;
    getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PicturesViewModel[], any>>;
    getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ReviewsViewModel, any>>;
    getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ReviewsViewModel[], any>>;
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DrinksListViewModel, any>>;
    updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
