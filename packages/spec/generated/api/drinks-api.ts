/* tslint:disable */
/* eslint-disable */
/**
 * API
 * The main API for the UI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DrinksListViewModel } from '../models';
// @ts-ignore
import type { DrinksViewModel } from '../models';
// @ts-ignore
import type { GetDrinksRequestViewModel } from '../models';
/**
 * DrinksApi - axios parameter creator
 * @export
 */
export const DrinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrink: async (drinksViewModel: DrinksViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinksViewModel' is not null or undefined
            assertParamExists('createDrink', 'drinksViewModel', drinksViewModel)
            const localVarPath = `/drinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drinksViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrink: async (drinkId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('getDrink', 'drinkId', drinkId)
            const localVarPath = `/drinks/{drinkId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinks: async (query: GetDrinksRequestViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getDrinks', 'query', query)
            const localVarPath = `/drinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrinksApi - functional programming interface
 * @export
 */
export const DrinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrink(drinksViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.createDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrink(drinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinks(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrinks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DrinksApi - factory interface
 * @export
 */
export const DrinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrinksApiFp(configuration)
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel> {
            return localVarFp.createDrink(drinksViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel> {
            return localVarFp.getDrink(drinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel> {
            return localVarFp.getDrinks(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrinksApi - interface
 * @export
 * @interface DrinksApi
 */
export interface DrinksApiInterface {
    /**
     * 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;

    /**
     * 
     * @param {GetDrinksRequestViewModel} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel>;

}

/**
 * DrinksApi - object-oriented interface
 * @export
 * @class DrinksApi
 * @extends {BaseAPI}
 */
export class DrinksApi extends BaseAPI implements DrinksApiInterface {
    /**
     * 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).createDrink(drinksViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrink(drinkId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrink(drinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetDrinksRequestViewModel} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrinks(query, options).then((request) => request(this.axios, this.basePath));
    }
}

