/* tslint:disable */
/* eslint-disable */
/**
 * API
 * The main API for the UI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DrinksListViewModel } from '../models';
// @ts-ignore
import type { DrinksViewModel } from '../models';
// @ts-ignore
import type { GetDrinksRequestViewModel } from '../models';
// @ts-ignore
import type { PicturesViewModel } from '../models';
// @ts-ignore
import type { ReviewsViewModel } from '../models';
/**
 * DrinksApi - axios parameter creator
 * @export
 */
export const DrinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrink: async (drinksViewModel: DrinksViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinksViewModel' is not null or undefined
            assertParamExists('createDrink', 'drinksViewModel', drinksViewModel)
            const localVarPath = `/drinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drinksViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {PicturesViewModel} picturesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrinkPicture: async (drinkId: number, picturesViewModel: PicturesViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('createDrinkPicture', 'drinkId', drinkId)
            // verify required parameter 'picturesViewModel' is not null or undefined
            assertParamExists('createDrinkPicture', 'picturesViewModel', picturesViewModel)
            const localVarPath = `/drinks/{drinkId}/pictures`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(picturesViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrinkReview: async (drinkId: number, reviewsViewModel: ReviewsViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('createDrinkReview', 'drinkId', drinkId)
            // verify required parameter 'reviewsViewModel' is not null or undefined
            assertParamExists('createDrinkReview', 'reviewsViewModel', reviewsViewModel)
            const localVarPath = `/drinks/{drinkId}/reviews`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewsViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrink: async (drinkId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('deleteDrink', 'drinkId', drinkId)
            const localVarPath = `/drinks/{drinkId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} pictureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrinkPicture: async (drinkId: number, pictureId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('deleteDrinkPicture', 'drinkId', drinkId)
            // verify required parameter 'pictureId' is not null or undefined
            assertParamExists('deleteDrinkPicture', 'pictureId', pictureId)
            const localVarPath = `/drinks/{drinkId}/pictures/{pictureId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)))
                .replace(`{${"pictureId"}}`, encodeURIComponent(String(pictureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrinkReview: async (drinkId: number, reviewId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('deleteDrinkReview', 'drinkId', drinkId)
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('deleteDrinkReview', 'reviewId', reviewId)
            const localVarPath = `/drinks/{drinkId}/reviews/{reviewId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrink: async (drinkId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('getDrink', 'drinkId', drinkId)
            const localVarPath = `/drinks/{drinkId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkPictures: async (drinkId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('getDrinkPictures', 'drinkId', drinkId)
            const localVarPath = `/drinks/{drinkId}/pictures`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkReview: async (drinkId: number, reviewId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('getDrinkReview', 'drinkId', drinkId)
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('getDrinkReview', 'reviewId', reviewId)
            const localVarPath = `/drinks/{drinkId}/reviews/{reviewId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkReviews: async (drinkId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('getDrinkReviews', 'drinkId', drinkId)
            const localVarPath = `/drinks/{drinkId}/reviews`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinks: async (query: GetDrinksRequestViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getDrinks', 'query', query)
            const localVarPath = `/drinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrink: async (drinkId: number, drinksViewModel: DrinksViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('updateDrink', 'drinkId', drinkId)
            // verify required parameter 'drinksViewModel' is not null or undefined
            assertParamExists('updateDrink', 'drinksViewModel', drinksViewModel)
            const localVarPath = `/drinks/{drinkId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drinksViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrinkReview: async (drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'drinkId' is not null or undefined
            assertParamExists('updateDrinkReview', 'drinkId', drinkId)
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('updateDrinkReview', 'reviewId', reviewId)
            // verify required parameter 'reviewsViewModel' is not null or undefined
            assertParamExists('updateDrinkReview', 'reviewsViewModel', reviewsViewModel)
            const localVarPath = `/drinks/{drinkId}/reviews/{reviewId}`
                .replace(`{${"drinkId"}}`, encodeURIComponent(String(drinkId)))
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewsViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrinksApi - functional programming interface
 * @export
 */
export const DrinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrink(drinksViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.createDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {PicturesViewModel} picturesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PicturesViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrinkPicture(drinkId, picturesViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.createDrinkPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrinkReview(drinkId, reviewsViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.createDrinkReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDrink(drinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.deleteDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} pictureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDrinkPicture(drinkId, pictureId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.deleteDrinkPicture']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDrinkReview(drinkId, reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.deleteDrinkReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrink(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrink(drinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PicturesViewModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinkPictures(drinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrinkPictures']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinkReview(drinkId, reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrinkReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewsViewModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinkReviews(drinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrinkReviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinksListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinks(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.getDrinks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDrink(drinkId, drinksViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.updateDrink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDrinkReview(drinkId, reviewId, reviewsViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DrinksApi.updateDrinkReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DrinksApi - factory interface
 * @export
 */
export const DrinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrinksApiFp(configuration)
    return {
        /**
         * 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel> {
            return localVarFp.createDrink(drinksViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {PicturesViewModel} picturesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): AxiosPromise<PicturesViewModel> {
            return localVarFp.createDrinkPicture(drinkId, picturesViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel> {
            return localVarFp.createDrinkReview(drinkId, reviewsViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDrink(drinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} pictureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDrinkPicture(drinkId, pictureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDrinkReview(drinkId, reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel> {
            return localVarFp.getDrink(drinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PicturesViewModel>> {
            return localVarFp.getDrinkPictures(drinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel> {
            return localVarFp.getDrinkReview(drinkId, reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewsViewModel>> {
            return localVarFp.getDrinkReviews(drinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetDrinksRequestViewModel} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel> {
            return localVarFp.getDrinks(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {DrinksViewModel} drinksViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDrink(drinkId, drinksViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} drinkId 
         * @param {number} reviewId 
         * @param {ReviewsViewModel} reviewsViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDrinkReview(drinkId, reviewId, reviewsViewModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrinksApi - interface
 * @export
 * @interface DrinksApi
 */
export interface DrinksApiInterface {
    /**
     * 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {PicturesViewModel} picturesViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig): AxiosPromise<PicturesViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {ReviewsViewModel} reviewsViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    deleteDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} drinkId 
     * @param {number} pictureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrink(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<DrinksViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PicturesViewModel>>;

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<ReviewsViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReviewsViewModel>>;

    /**
     * 
     * @param {GetDrinksRequestViewModel} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig): AxiosPromise<DrinksListViewModel>;

    /**
     * 
     * @param {number} drinkId 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {ReviewsViewModel} reviewsViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApiInterface
     */
    updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * DrinksApi - object-oriented interface
 * @export
 * @class DrinksApi
 * @extends {BaseAPI}
 */
export class DrinksApi extends BaseAPI implements DrinksApiInterface {
    /**
     * 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public createDrink(drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).createDrink(drinksViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {PicturesViewModel} picturesViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public createDrinkPicture(drinkId: number, picturesViewModel: PicturesViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).createDrinkPicture(drinkId, picturesViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {ReviewsViewModel} reviewsViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public createDrinkReview(drinkId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).createDrinkReview(drinkId, reviewsViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public deleteDrink(drinkId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).deleteDrink(drinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {number} pictureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public deleteDrinkPicture(drinkId: number, pictureId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).deleteDrinkPicture(drinkId, pictureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public deleteDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).deleteDrinkReview(drinkId, reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrink(drinkId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrink(drinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrinkPictures(drinkId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrinkPictures(drinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrinkReview(drinkId: number, reviewId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrinkReview(drinkId, reviewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrinkReviews(drinkId: number, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrinkReviews(drinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetDrinksRequestViewModel} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public getDrinks(query: GetDrinksRequestViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).getDrinks(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {DrinksViewModel} drinksViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public updateDrink(drinkId: number, drinksViewModel: DrinksViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).updateDrink(drinkId, drinksViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} drinkId 
     * @param {number} reviewId 
     * @param {ReviewsViewModel} reviewsViewModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrinksApi
     */
    public updateDrinkReview(drinkId: number, reviewId: number, reviewsViewModel: ReviewsViewModel, options?: RawAxiosRequestConfig) {
        return DrinksApiFp(this.configuration).updateDrinkReview(drinkId, reviewId, reviewsViewModel, options).then((request) => request(this.axios, this.basePath));
    }
}

